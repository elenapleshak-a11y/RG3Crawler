class SiteComparator {
    constructor() {
        this.oldSiteData = null;
        this.newSiteData = null;
        this.comparisonResults = null;
        this.isComparing = false;
        
        this.config = {
            autoMapUrls: true,
            checkRedirects: true,
            checkBrokenLinks: true,
            customUrlMapping: null
        };
    }

    async startComparison(oldSiteUrl, newSiteUrl) {
        if (!oldSiteUrl || !newSiteUrl) {
            throw new Error('–£–∫–∞–∂–∏—Ç–µ URL –æ–±–æ–∏—Ö —Å–∞–π—Ç–æ–≤');
        }

        this.isComparing = true;
        this.log('üöÄ –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤...', 'info');
        this.log(`üìä –°—Ç–∞—Ä—ã–π —Å–∞–π—Ç: ${oldSiteUrl}`, 'info');
        this.log(`üéØ –ù–æ–≤—ã–π —Å–∞–π—Ç: ${newSiteUrl}`, 'info');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∞—É–ª–∏–Ω–≥–∞)
            await this.loadSiteData(oldSiteUrl, newSiteUrl);
            
            // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º URL
            this.log('üîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ URL...', 'info');
            const urlMapping = this.mapUrls();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            this.log('‚öñÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...', 'info');
            this.comparisonResults = this.compareSites(urlMapping);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.analyzeResults();
            
            this.completeComparison();
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
            this.stopComparison();
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ loadSiteData –≤ SiteComparator
    async loadSiteData(oldSiteUrl, newSiteUrl) {
    this.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤...', 'info');
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
    const oldData = this.loadCrawlData('old_site');
    const newData = this.loadCrawlData('new_site');
    
    if (oldData && newData) {
        this.oldSiteData = oldData;
        this.newSiteData = newData;
        this.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'success');
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∞—É–ª–∏–Ω–≥
        this.log('‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º', 'info');
        this.oldSiteData = this.getDemoSiteData(oldSiteUrl, 'old');
        this.newSiteData = this.getDemoSiteData(newSiteUrl, 'new');
    }
    
    this.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${this.oldSiteData.pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–∞–π—Ç–∞`, 'success');
    this.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${this.newSiteData.pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü —Å –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞`, 'success');
}

loadCrawlData(siteKey) {
    const data = localStorage.getItem(`seo_crawl_${siteKey}`);
    if (data) {
        return JSON.parse(data);
    }
    return null;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫—Ä–∞—É–ª–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
async function crawlAndCompare() {
    const oldSiteUrl = document.getElementById('oldSiteUrl').value.trim();
    const newSiteUrl = document.getElementById('newSiteUrl').value.trim();
    
    if (!oldSiteUrl || !newSiteUrl) {
        showError('–£–∫–∞–∂–∏—Ç–µ URL –æ–±–æ–∏—Ö —Å–∞–π—Ç–æ–≤');
        return;
    }
    
    const crawlFirst = confirm('–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫—Ä–∞—É–ª–∏–Ω–≥ –æ–±–æ–∏—Ö —Å–∞–π—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º?');
    
    if (crawlFirst) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∫—Ä–∞—É–ª–∏–Ω–≥–∞
        switchMode('crawl');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        localStorage.setItem('comparison_old_url', oldSiteUrl);
        localStorage.setItem('comparison_new_url', newSiteUrl);
        
        alert('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫—Ä–∞—É–ª–∏–Ω–≥ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å–∞–π—Ç–∞, –∑–∞—Ç–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.');
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        startComparison();
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º startComparison
function startComparison() {
    const oldSiteUrl = document.getElementById('oldSiteUrl').value.trim();
    const newSiteUrl = document.getElementById('newSiteUrl').value.trim();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ localStorage
    localStorage.setItem('comparison_old_url', oldSiteUrl);
    localStorage.setItem('comparison_new_url', newSiteUrl);
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

    getDemoSiteData(baseUrl, type) {
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—Ä–∞—É–ª–µ—Ä–∞
        return {
            baseUrl: baseUrl,
            pages: [
                {
                    url: `${baseUrl}/`,
                    status: 200,
                    title: type === 'old' ? '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' : '–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
                    description: type === 'old' ? '–û–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã' : '–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                    h1: type === 'old' ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å' : 'Welcome to our site',
                    canonical: `${baseUrl}/`,
                    responseTime: 150,
                    size: 24500
                },
                {
                    url: `${baseUrl}/about`,
                    status: 200,
                    title: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
                    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                    h1: '–û –Ω–∞—Å',
                    canonical: `${baseUrl}/about`,
                    responseTime: 120,
                    size: 18700
                },
                {
                    url: `${baseUrl}/contact`,
                    status: type === 'new' ? 404 : 200,
                    title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
                    description: '–ö–∞–∫ —Å –Ω–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è',
                    h1: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
                    canonical: `${baseUrl}/contact`,
                    responseTime: 110,
                    size: 15600
                }
            ]
        };
    }

    mapUrls() {
        const mapping = new Map();
        
        if (this.config.customUrlMapping) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            this.config.customUrlMapping.forEach(pair => {
                mapping.set(pair.old_url, pair.new_url);
            });
        } else if (this.config.autoMapUrls) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
            this.oldSiteData.pages.forEach(oldPage => {
                const oldPath = new URL(oldPage.url).pathname;
                const correspondingNewUrl = this.findCorrespondingUrl(oldPath, this.newSiteData);
                
                if (correspondingNewUrl) {
                    mapping.set(oldPage.url, correspondingNewUrl);
                    this.log(`üîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${oldPage.url} ‚Üí ${correspondingNewUrl}`, 'success');
                } else {
                    mapping.set(oldPage.url, null);
                    this.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–Ω–∞–ª–æ–≥ –¥–ª—è: ${oldPage.url}`, 'warning');
                }
            });
        }
        
        return mapping;
    }

    findCorrespondingUrl(oldPath, newSiteData) {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∞–∫–∏–º –∂–µ –ø—É—Ç–µ–º
        for (let newPage of newSiteData.pages) {
            const newPath = new URL(newPage.url).pathname;
            if (oldPath === newPath) {
                return newPage.url;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π –ø—É—Ç—å
        for (let newPage of newSiteData.pages) {
            const newPath = new URL(newPage.url).pathname;
            if (this.arePathsSimilar(oldPath, newPath)) {
                return newPage.url;
            }
        }
        
        return null;
    }

    arePathsSimilar(path1, path2) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π
        const segments1 = path1.split('/').filter(s => s);
        const segments2 = path2.split('/').filter(s => s);
        
        return segments1.length === segments2.length && 
               segments1[segments1.length - 1] === segments2[segments2.length - 1];
    }

    compareSites(urlMapping) {
        const results = {
            comparedPages: [],
            redirects: [],
            brokenLinks: [],
            missingOnNew: [],
            missingOnOld: [],
            warnings: [],
            summary: {
                totalCompared: 0,
                identical: 0,
                withDifferences: 0,
                missingOnNew: 0,
                missingOnOld: 0,
                redirectsFound: 0,
                brokenLinksFound: 0,
                criticalWarnings: 0
            }
        };

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        urlMapping.forEach((newUrl, oldUrl) => {
            const oldPage = this.findPageByUrl(oldUrl, this.oldSiteData.pages);
            const newPage = newUrl ? this.findPageByUrl(newUrl, this.newSiteData.pages) : null;
            
            results.totalCompared++;
            
            if (!newPage) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ω–æ–≤–æ–º —Å–∞–π—Ç–µ
                results.missingOnNew.push({
                    oldUrl: oldUrl,
                    oldTitle: oldPage?.title,
                    oldStatus: oldPage?.status
                });
                results.summary.missingOnNew++;
                return;
            }
            
            if (!oldPage) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–∞–π—Ç–µ (–Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
                results.missingOnOld.push({
                    newUrl: newUrl,
                    newTitle: newPage?.title,
                    newStatus: newPage?.status
                });
                results.summary.missingOnOld++;
                return;
            }
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
            const comparison = this.comparePages(oldPage, newPage);
            results.comparedPages.push(comparison);
            
            if (comparison.status === 'identical') {
                results.summary.identical++;
            } else {
                results.summary.withDifferences++;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
            if (this.config.checkRedirects && oldPage.status >= 300 && oldPage.status < 400) {
                results.redirects.push({
                    from: oldUrl,
                    to: newUrl,
                    status: oldPage.status
                });
                results.summary.redirectsFound++;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏
            if (this.config.checkBrokenLinks && newPage.status >= 400) {
                results.brokenLinks.push({
                    url: newUrl,
                    status: newPage.status,
                    title: newPage.title
                });
                results.summary.brokenLinksFound++;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            const warnings = this.checkCriticalWarnings(oldPage, newPage);
            results.warnings.push(...warnings);
            results.summary.criticalWarnings += warnings.length;
        });

        return results;
    }

    findPageByUrl(url, pages) {
        return pages.find(page => page.url === url) || null;
    }

    comparePages(oldPage, newPage) {
        const comparison = {
            oldUrl: oldPage.url,
            newUrl: newPage.url,
            status: 'identical',
            differences: [],
            oldData: {},
            newData: {}
        };

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        const attributes = ['title', 'description', 'h1', 'canonical', 'status'];
        
        attributes.forEach(attr => {
            comparison.oldData[attr] = oldPage[attr];
            comparison.newData[attr] = newPage[attr];
            
            if (oldPage[attr] !== newPage[attr]) {
                comparison.differences.push(attr);
                comparison.status = 'differences';
            }
        });

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        comparison.oldData.responseTime = oldPage.responseTime;
        comparison.newData.responseTime = newPage.responseTime;
        comparison.oldData.size = oldPage.size;
        comparison.newData.size = newPage.size;

        if (Math.abs(oldPage.responseTime - newPage.responseTime) > 100) {
            comparison.differences.push('responseTime');
            comparison.status = 'differences';
        }

        return comparison;
    }

    checkCriticalWarnings(oldPage, newPage) {
        const warnings = [];
        
        // Noindex –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (newPage.robots && newPage.robots.includes('noindex')) {
            warnings.push({
                type: 'noindex',
                message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${newPage.url} –∏–º–µ–µ—Ç noindex`,
                severity: 'critical',
                page: newPage.url
            });
        }
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ canonical
        if (oldPage.canonical && newPage.canonical && oldPage.canonical !== newPage.canonical) {
            warnings.push({
                type: 'canonical_changed',
                message: `Canonical –∏–∑–º–µ–Ω–∏–ª—Å—è: ${oldPage.canonical} ‚Üí ${newPage.canonical}`,
                severity: 'warning',
                page: newPage.url
            });
        }
        
        // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (newPage.responseTime > oldPage.responseTime * 2) {
            warnings.push({
                type: 'performance_degradation',
                message: `–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ö—É–¥—à–∏–ª–æ—Å—å: ${oldPage.responseTime}ms ‚Üí ${newPage.responseTime}ms`,
                severity: 'warning',
                page: newPage.url
            });
        }
        
        return warnings;
    }

    analyzeResults() {
        this.log('üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...', 'info');
        
        const summary = this.comparisonResults.summary;
        
        this.log(`üìä –í—Å–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–æ: ${summary.totalCompared} —Å—Ç—Ä–∞–Ω–∏—Ü`, 'info');
        this.log(`‚úÖ –ò–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö: ${summary.identical}`, summary.identical > 0 ? 'success' : 'warning');
        this.log(`‚ö†Ô∏è –° –æ—Ç–ª–∏—á–∏—è–º–∏: ${summary.withDifferences}`, summary.withDifferences > 0 ? 'warning' : 'success');
        this.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ω–æ–≤–æ–º: ${summary.missingOnNew}`, summary.missingOnNew > 0 ? 'error' : 'success');
        this.log(`üîÄ –†–µ–¥–∏—Ä–µ–∫—Ç–æ–≤: ${summary.redirectsFound}`, 'info');
        this.log(`üö´ –ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: ${summary.brokenLinksFound}`, summary.brokenLinksFound > 0 ? 'error' : 'success');
        this.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${summary.criticalWarnings}`, summary.criticalWarnings > 0 ? 'error' : 'success');
    }

    completeComparison() {
        this.isComparing = false;
        this.log('‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'success');
        
        if (typeof showComparisonResults === 'function') {
            showComparisonResults(this.comparisonResults);
        }
    }

    stopComparison() {
        this.isComparing = false;
        this.log('‚èπÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'warning');
    }

    log(message, type = 'info') {
        if (typeof addCompareLog === 'function') {
            addCompareLog(message, type);
        }
    }

    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
const siteComparator = new SiteComparator();

// UI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
function switchMode(mode) {
    document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.mode-content').forEach(content => content.classList.remove('active'));
    
    document.querySelector(`[onclick="switchMode('${mode}')"]`).classList.add('active');
    document.getElementById(`${mode}Mode`).classList.add('active');
}

function startComparison() {
    const oldSiteUrl = document.getElementById('oldSiteUrl').value.trim();
    const newSiteUrl = document.getElementById('newSiteUrl').value.trim();
    const autoMapUrls = document.getElementById('autoMapUrls').checked;
    const checkRedirects = document.getElementById('checkRedirects').checked;
    const checkBrokenLinks = document.getElementById('checkBrokenLinks').checked;
    
    if (!oldSiteUrl || !newSiteUrl) {
        showError('–£–∫–∞–∂–∏—Ç–µ URL –æ–±–æ–∏—Ö —Å–∞–π—Ç–æ–≤');
        return;
    }
    
    document.getElementById('error').textContent = '';
    document.getElementById('compareProgressSection').style.display = 'block';
    document.getElementById('compareResultsSection').style.display = 'none';
    document.getElementById('compareBtn').style.display = 'none';
    document.getElementById('stopCompareBtn').style.display = 'inline-block';
    document.getElementById('compareLog').innerHTML = '';
    
    siteComparator.updateConfig({ 
        autoMapUrls, 
        checkRedirects, 
        checkBrokenLinks 
    });
    
    siteComparator.startComparison(oldSiteUrl, newSiteUrl).catch(error => {
        showError(error.message);
    });
}

function stopComparison() {
    siteComparator.stopComparison();
    document.getElementById('compareBtn').style.display = 'inline-block';
    document.getElementById('stopCompareBtn').style.display = 'none';
}

function addCompareLog(message, type = 'info') {
    const logElement = document.getElementById('compareLog');
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry log-${type}`;
    logEntry.innerHTML = `<span class="log-time">[${timestamp}]</span> ${message}`;
    logElement.appendChild(logEntry);
    logElement.scrollTop = logElement.scrollHeight;
}

function showComparisonResults(results) {
    document.getElementById('compareProgressSection').style.display = 'none';
    document.getElementById('compareResultsSection').style.display = 'block';
    
    showComparisonSummary(results);
    showComparisonTable(results);
    showRedirectsTable(results);
    showBrokenLinksTable(results);
    showMissingPagesTables(results);
    showWarningsList(results);
}

function showComparisonSummary(results) {
    const summary = results.summary;
    const statsHtml = `
        <div class="final-stats">
            <div class="stat-item">üìä <strong>–í—Å–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–æ:</strong> ${summary.totalCompared} —Å—Ç—Ä–∞–Ω–∏—Ü</div>
            <div class="stat-item">‚úÖ <strong>–ò–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö:</strong> ${summary.identical}</div>
            <div class="stat-item">‚ö†Ô∏è <strong>–° –æ—Ç–ª–∏—á–∏—è–º–∏:</strong> ${summary.withDifferences}</div>
            <div class="stat-item">‚ùå <strong>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ω–æ–≤–æ–º:</strong> ${summary.missingOnNew}</div>
            <div class="stat-item">üÜï <strong>–ù–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:</strong> ${summary.missingOnOld}</div>
            <div class="stat-item">üîÄ <strong>–†–µ–¥–∏—Ä–µ–∫—Ç–æ–≤:</strong> ${summary.redirectsFound}</div>
            <div class="stat-item">üö´ <strong>–ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫:</strong> ${summary.brokenLinksFound}</div>
            <div class="stat-item">üö® <strong>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</strong> ${summary.criticalWarnings}</div>
        </div>
    `;
    
    document.getElementById('compareResultsStats').innerHTML = statsHtml;
    
    // –°–≤–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const summaryCards = document.getElementById('summaryCards');
    summaryCards.innerHTML = `
        <div class="summary-cards-grid">
            <div class="summary-card ${summary.identical === summary.totalCompared ? 'success' : 'warning'}">
                <div class="summary-card-number">${Math.round((summary.identical / summary.totalCompared) * 100)}%</div>
                <div class="summary-card-label">–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ</div>
            </div>
            <div class="summary-card ${summary.missingOnNew === 0 ? 'success' : 'error'}">
                <div class="summary-card-number">${summary.missingOnNew}</div>
                <div class="summary-card-label">–ü–æ—Ç–µ—Ä—è–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü</div>
            </div>
            <div class="summary-card ${summary.brokenLinksFound === 0 ? 'success' : 'error'}">
                <div class="summary-card-number">${summary.brokenLinksFound}</div>
                <div class="summary-card-label">–ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫</div>
            </div>
            <div class="summary-card ${summary.criticalWarnings === 0 ? 'success' : 'error'}">
                <div class="summary-card-number">${summary.criticalWarnings}</div>
                <div class="summary-card-label">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫</div>
            </div>
        </div>
    `;
}

// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü ...

function exportComparisonXLSX() {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞
    alert('–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
}

function exportComparisonJSON() {
    const results = siteComparator.comparisonResults;
    const jsonContent = JSON.stringify(results, null, 2);
    downloadFile(jsonContent, 'site_comparison.json', 'application/json');
}

function exportComparisonSummary() {
    const results = siteComparator.comparisonResults;
    const headers = ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'];
    const csvContent = [
        headers.join(','),
        ['–í—Å–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü', results.summary.totalCompared].join(','),
        ['–ò–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü', results.summary.identical].join(','),
        ['–°—Ç—Ä–∞–Ω–∏—Ü —Å –æ—Ç–ª–∏—á–∏—è–º–∏', results.summary.withDifferences].join(','),
        ['–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ω–æ–≤–æ–º —Å–∞–π—Ç–µ', results.summary.missingOnNew].join(','),
        ['–ù–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü', results.summary.missingOnOld].join(','),
        ['–ù–∞–π–¥–µ–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤', results.summary.redirectsFound].join(','),
        ['–ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫', results.summary.brokenLinksFound].join(','),
        ['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π', results.summary.criticalWarnings].join(',')
    ].join('\n');
    
    downloadFile(csvContent, 'comparison_summary.csv', 'text/csv');
}
